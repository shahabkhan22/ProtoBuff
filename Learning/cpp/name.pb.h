// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: name.proto

#ifndef PROTOBUF_name_2eproto__INCLUDED
#define PROTOBUF_name_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_name_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsNameImpl();
void InitDefaultsName();
inline void InitDefaults() {
  InitDefaultsName();
}
}  // namespace protobuf_name_2eproto
class Name;
class NameDefaultTypeInternal;
extern NameDefaultTypeInternal _Name_default_instance_;

// ===================================================================

class Name : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Name) */ {
 public:
  Name();
  virtual ~Name();

  Name(const Name& from);

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Name(Name&& from) noexcept
    : Name() {
    *this = ::std::move(from);
  }

  inline Name& operator=(Name&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Name& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Name* internal_default_instance() {
    return reinterpret_cast<const Name*>(
               &_Name_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Name* other);
  friend void swap(Name& a, Name& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Name* New() const PROTOBUF_FINAL { return New(NULL); }

  Name* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Name& from);
  void MergeFrom(const Name& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Name* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string mname = 2;
  int mname_size() const;
  void clear_mname();
  static const int kMnameFieldNumber = 2;
  const ::std::string& mname(int index) const;
  ::std::string* mutable_mname(int index);
  void set_mname(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mname(int index, ::std::string&& value);
  #endif
  void set_mname(int index, const char* value);
  void set_mname(int index, const char* value, size_t size);
  ::std::string* add_mname();
  void add_mname(const ::std::string& value);
  #if LANG_CXX11
  void add_mname(::std::string&& value);
  #endif
  void add_mname(const char* value);
  void add_mname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mname();

  // string fname = 1;
  void clear_fname();
  static const int kFnameFieldNumber = 1;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // string lname = 3;
  void clear_lname();
  static const int kLnameFieldNumber = 3;
  const ::std::string& lname() const;
  void set_lname(const ::std::string& value);
  #if LANG_CXX11
  void set_lname(::std::string&& value);
  #endif
  void set_lname(const char* value);
  void set_lname(const char* value, size_t size);
  ::std::string* mutable_lname();
  ::std::string* release_lname();
  void set_allocated_lname(::std::string* lname);

  // @@protoc_insertion_point(class_scope:Name)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mname_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  ::google::protobuf::internal::ArenaStringPtr lname_;
  mutable int _cached_size_;
  friend struct ::protobuf_name_2eproto::TableStruct;
  friend void ::protobuf_name_2eproto::InitDefaultsNameImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Name

// string fname = 1;
inline void Name::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Name::fname() const {
  // @@protoc_insertion_point(field_get:Name.fname)
  return fname_.GetNoArena();
}
inline void Name::set_fname(const ::std::string& value) {
  
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Name.fname)
}
#if LANG_CXX11
inline void Name::set_fname(::std::string&& value) {
  
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Name.fname)
}
#endif
inline void Name::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Name.fname)
}
inline void Name::set_fname(const char* value, size_t size) {
  
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Name.fname)
}
inline ::std::string* Name::mutable_fname() {
  
  // @@protoc_insertion_point(field_mutable:Name.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Name::release_fname() {
  // @@protoc_insertion_point(field_release:Name.fname)
  
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    
  } else {
    
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:Name.fname)
}

// repeated string mname = 2;
inline int Name::mname_size() const {
  return mname_.size();
}
inline void Name::clear_mname() {
  mname_.Clear();
}
inline const ::std::string& Name::mname(int index) const {
  // @@protoc_insertion_point(field_get:Name.mname)
  return mname_.Get(index);
}
inline ::std::string* Name::mutable_mname(int index) {
  // @@protoc_insertion_point(field_mutable:Name.mname)
  return mname_.Mutable(index);
}
inline void Name::set_mname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Name.mname)
  mname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Name::set_mname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Name.mname)
  mname_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Name::set_mname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Name.mname)
}
inline void Name::set_mname(int index, const char* value, size_t size) {
  mname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Name.mname)
}
inline ::std::string* Name::add_mname() {
  // @@protoc_insertion_point(field_add_mutable:Name.mname)
  return mname_.Add();
}
inline void Name::add_mname(const ::std::string& value) {
  mname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Name.mname)
}
#if LANG_CXX11
inline void Name::add_mname(::std::string&& value) {
  mname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Name.mname)
}
#endif
inline void Name::add_mname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Name.mname)
}
inline void Name::add_mname(const char* value, size_t size) {
  mname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Name.mname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Name::mname() const {
  // @@protoc_insertion_point(field_list:Name.mname)
  return mname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Name::mutable_mname() {
  // @@protoc_insertion_point(field_mutable_list:Name.mname)
  return &mname_;
}

// string lname = 3;
inline void Name::clear_lname() {
  lname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Name::lname() const {
  // @@protoc_insertion_point(field_get:Name.lname)
  return lname_.GetNoArena();
}
inline void Name::set_lname(const ::std::string& value) {
  
  lname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Name.lname)
}
#if LANG_CXX11
inline void Name::set_lname(::std::string&& value) {
  
  lname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Name.lname)
}
#endif
inline void Name::set_lname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Name.lname)
}
inline void Name::set_lname(const char* value, size_t size) {
  
  lname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Name.lname)
}
inline ::std::string* Name::mutable_lname() {
  
  // @@protoc_insertion_point(field_mutable:Name.lname)
  return lname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Name::release_lname() {
  // @@protoc_insertion_point(field_release:Name.lname)
  
  return lname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_allocated_lname(::std::string* lname) {
  if (lname != NULL) {
    
  } else {
    
  }
  lname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lname);
  // @@protoc_insertion_point(field_set_allocated:Name.lname)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_name_2eproto__INCLUDED
